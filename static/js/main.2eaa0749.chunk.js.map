{"version":3,"sources":["components/Question.js","components/Answers.js","components/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["Question","this","props","questions","questionNumber","Fragment","className","question","answers","map","answer","index","checked","key","type","onChange","selectRadio","name","value","Component","Answers","answerValues","Object","values","console","log","actualAnswer","correctIndex","onClick","tryAgain","Quiz","state","step","e","currentAnswers","target","setState","nextQuestion","prevQuestion","submitQuestions","resetAnswers","questionsObj","i","length","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2eaa0749.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport class Question extends Component {\r\n\r\n    render() {\r\n        const { questions, questionNumber } = this.props;\r\n        return (\r\n            <React.Fragment>\r\n                <h1 className=\"text-xl md:text-4xl bg-gray-900 text-white w-3/4 mx-auto p-4 text-center font-bold uppercase rounded-lg\">Question { questionNumber + 1 }</h1>\r\n                <div className=\"bg-gray-300 p-8 mt-4 mx-auto shadow-md\">\r\n                    <p className=\"text-center lg:text-left text-lg sm:text-xl lg:text-2xl font-bold\">{ questions[questionNumber].question }</p>\r\n                    <br/>\r\n                    {\r\n                        questions[questionNumber].answers.map((answer,index) => {\r\n                        const checked = this.props.answer === answer ? true : false;\r\n                        return (\r\n                            <div className=\"text-left text-sm md:text-xl my-2\" key={index}>\r\n                                <input type=\"radio\" key={answer} onChange={this.props.selectRadio} name={questionNumber} checked={checked} value={answer}/> {answer}\r\n                                <br/>\r\n                            </div>\r\n                        )\r\n                        })   \r\n                    }      \r\n                </div>\r\n            </React.Fragment>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Question\r\n","import React, { Component } from 'react'\r\n\r\nexport class Answers extends Component {\r\n    render() {\r\n        const { answers } = this.props;\r\n        const answerValues = Object.values(answers).map(answer => answer)\r\n        console.log(this.props.questions)\r\n        return (\r\n            <div className=\"text-center w-full\">     \r\n                <h1 className=\"text-xl md:text-4xl bg-gray-900 text-white w-3/4 sm:w-1/4 mx-auto p-4 text-center font-bold uppercase rounded-lg\">Answers</h1>\r\n                <div className=\"bg-gray-200 p-4 mt-4 mx-auto w-11/12 sm:w-1/2 shadow-md\">\r\n                    {\r\n                        answerValues.map((answer,index) => {\r\n                            const { questions } = this.props;\r\n                            const actualAnswer = questions.questions[index].answers[questions.questions[index].correctIndex]\r\n                            if (actualAnswer === answer) {\r\n                                return (\r\n                                    <div className=\"my-2\">\r\n                                        <h1 className=\"font-bold mt-2\">Question {index+1}</h1>\r\n                                        <h2 className=\"text-green-600 font-bold\" key={index}>{ answer }</h2>\r\n                                    </div>\r\n                                    \r\n                                )\r\n                            } else {\r\n                                return (\r\n                                    <div className=\"my-2\">\r\n                                        <h1 className=\"font-bold mt-2\">Question {index+1}</h1>\r\n                                        <h2 className=\"text-red-600\" key={index}>{ answer } (Correct Answer: { actualAnswer })</h2>\r\n                                    </div>\r\n                                )                 \r\n                            }\r\n\r\n                        })   \r\n                    }    \r\n                </div>\r\n                <button className=\"bg-orange-500 hover:bg-orange-400 text-white mx-2 mt-8 py-3 px-10 font-bold rounded\" onClick={ this.props.tryAgain }>Try Again</button>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Answers\r\n","import React, { Component } from 'react'\r\nimport Question from './Question'\r\nimport questions from '../questions.json';\r\nimport Answers from './Answers'\r\n\r\nexport class Quiz extends Component {\r\n\r\n    state = {\r\n        step: 1,\r\n        questionNumber: 0,\r\n        answers: {\r\n\r\n        }\r\n    }\r\n\r\n    resetAnswers() {\r\n        const questionsObj = {}\r\n        for(let i=0; i<questions.questions.length; i++) {\r\n            questionsObj[i] = '';\r\n        }\r\n        this.setState({\r\n            answers: questionsObj\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetAnswers()\r\n    }\r\n\r\n    selectRadio = (e) => {\r\n        let { questionNumber, answers } = this.state;\r\n        let currentAnswers = answers;\r\n        currentAnswers[questionNumber] = e.target.value\r\n        this.setState({\r\n            answers: currentAnswers\r\n        })\r\n    }\r\n    \r\n    // Proceed to next step\r\n    nextQuestion = () => {\r\n        const { questionNumber } = this.state;\r\n        this.setState({\r\n            questionNumber: questionNumber + 1\r\n        });\r\n    }\r\n\r\n    // Go back to prev step\r\n    prevQuestion = () => {\r\n        const { questionNumber } = this.state;\r\n        this.setState({\r\n            questionNumber: questionNumber - 1\r\n        });\r\n    }\r\n\r\n    submitQuestions = () => {\r\n        this.setState({\r\n            step: this.state.step + 1\r\n        })\r\n    }\r\n\r\n    tryAgain = () => {\r\n        this.setState({\r\n            step: 1,\r\n            questionNumber: 0,\r\n            answers: {}\r\n        })\r\n        this.resetAnswers()\r\n    }\r\n\r\n    render() {\r\n        const { questionNumber } = this.state;\r\n\r\n        if (this.state.step === 1)  {\r\n            return (\r\n                <div className=\"h-full sm:h-screen flex flex-col justify-center items-center\">  \r\n                    <div className=\"relative mt-4 md:mt-0 w-3/4 md:w-1/2\">\r\n                            <Question \r\n                                questionNumber={ questionNumber }\r\n                                questions={ questions.questions }\r\n                                selectRadio={ this.selectRadio }\r\n                                answer={ this.state.answers[questionNumber] }\r\n                            />\r\n\r\n\r\n                    </div>\r\n                        <div className=\"flex absolute bottom-0 md:static mb-6\">\r\n                            {questionNumber > 0 && <button className=\"bg-red-500 hover:bg-red-400 text-sm md:text-lg text-white font-bold mx-2 mt-4 py-4 px-3 rounded\" onClick={ this.prevQuestion }>Previous Question</button>}\r\n                            {questionNumber + 1 < questions.questions.length && <button className=\"bg-blue-500 hover:bg-blue-400 text-sm md:text-lg text-white font-bold mx-2 mt-4 py-4 px-3 rounded\" onClick={ this.nextQuestion }>Next Question</button>}\r\n                            \r\n                            \r\n                            {questionNumber + 1 === questions.questions.length && <button className=\"bg-green-500 hover:bg-green-400 text-sm md:text-lg text-white font-bold mx-2 mt-4 py-4 px-8 rounded\" onClick={ this.submitQuestions }>Submit</button>}\r\n                        </div>\r\n                </div>\r\n            )      \r\n        } else {\r\n            return (\r\n                <div className=\"h-full flex justify-center items-center my-4\">  \r\n                    <Answers answers={ this.state.answers } questions={ questions } tryAgain={ this.tryAgain } />\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default Quiz\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Quiz from './components/Quiz'\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Quiz />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}