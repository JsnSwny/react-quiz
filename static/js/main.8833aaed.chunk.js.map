{"version":3,"sources":["components/ProgressBar.js","components/Question.js","components/Answers.js","components/QuizStart.js","components/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["ProgressBar","percentage","style","width","height","className","Question","questions","questionNumber","selectOption","answerValue","Fragment","length","toFixed","question","answers","map","answer","index","checked","key","value","onClick","Answers","tryAgain","correctAnswers","correctIndex","actualAnswer","QuizStart","nextStep","Quiz","useState","step","setStep","setQuestionNumber","Array","fill","setAnswers","e","target","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8833aaed.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst ProgressBar = ({ percentage }) => {\r\n    return (\r\n        <div style={{ width: \"100%\",  height: \"30px\" }} className=\"bg-gray-800 mt-4 rounded\">\r\n            <div style={{ width: \"100%\" }} className=\"text-center z-50 text-white font-bold absolute mt-1\">{ percentage }</div>\r\n            <div style={{ width: percentage, height: \"100%\" }} className=\"bg-green-600 rounded-l\"></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProgressBar\r\n","import React from 'react'\r\nimport ProgressBar from './ProgressBar'\r\n\r\nconst Question = ({ questions, questionNumber, selectOption, answerValue }) => {\r\n    return (\r\n        <React.Fragment>\r\n            <h1 className=\"text-xl md:text-4xl bg-gray-900 text-white w-3/4 mx-auto p-4 text-center font-bold uppercase rounded-lg\">Question { questionNumber + 1 }</h1>\r\n            <ProgressBar \r\n                percentage={ (((questionNumber) / questions.length) * 100).toFixed(0) + \"%\"}\r\n            />\r\n            <div className=\"bg-gray-300 p-8 mt-4 mx-auto shadow-md\">\r\n                <p className=\"text-center lg:text-left text-lg sm:text-xl lg:text-2xl font-bold\">{ questions[questionNumber].question }</p>\r\n                <br/>\r\n                {\r\n                    questions[questionNumber].answers.map((answer,index) => {\r\n                    const checked = answerValue[questionNumber] === answer ? true : false;\r\n                    return (\r\n                        <React.Fragment key={index}>\r\n                            { \r\n                                checked === true\r\n                                ? <button value={answer} onClick={selectOption} className=\"w-full focus:outline-none text-left text-sm md:text-xl my-2 bg-green-200 p-3 cursor-pointer\">{ answer }</button>\r\n                                : <button value={answer} onClick={selectOption} className=\"w-full focus:outline-none text-left text-sm md:text-xl my-2 bg-gray-100 hover:bg-gray-200 p-3 cursor-pointer\">{ answer }</button>\r\n                            }\r\n                        </React.Fragment>\r\n                    )\r\n                    })   \r\n                }      \r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Question\r\n","import React from 'react'\r\n\r\nconst Answers = ({ answers, questions, tryAgain }) => {\r\n    let correctAnswers = 0\r\n    answers.map((answer, index) => {\r\n        if(questions.questions[index].answers[questions.questions[index].correctIndex] === answer) {\r\n            correctAnswers ++\r\n        }\r\n        return correctAnswers\r\n    })\r\n    return (\r\n        <div className=\"text-center w-full\">     \r\n            <h1 className=\"text-2xl md:text-4xl bg-gray-900 text-white w-3/4 md:w-1/2 mx-auto p-4 text-center font-bold uppercase rounded-lg\">Answers</h1>\r\n            <div className=\"bg-gray-200 p-4 mt-4 mx-auto w-11/12 md:w-3/4 shadow-md\">\r\n                <h1 className=\"text-2xl sm:text-4xl\">You scored <strong>{ correctAnswers }/{ questions.questions.length }!</strong></h1>\r\n                <div className=\"md:flex md:flex-wrap md:justify-center mt-4 mb-4\">\r\n                {\r\n                    answers.map((answer,index) => {\r\n                        const actualAnswer = questions.questions[index].answers[questions.questions[index].correctIndex]\r\n                        return (\r\n                            <div key={index} className=\"md:w-5/12 lg:w-1/3 xl:w-1/4 m-4 bg-gray-300 py-6 rounded-lg shadow-inner\"> \r\n                                <h1 className=\"font-bold text-xl\">Q{index+1}:</h1>\r\n                                <h1 className=\"text-lg mx-4\">{ questions.questions[index].question }</h1>\r\n                                { \r\n                                    answer === actualAnswer \r\n                                    ? <h2 className=\"mx-4 mt-2 text-green-600\"><strong>Correct!</strong> Answer: \"{ actualAnswer }\"</h2> \r\n                                    : <h2 className=\"mx-4 mt-2 text-red-600\"><strong>Wrong!</strong> Answer: \"{ actualAnswer }\"</h2> \r\n                                }\r\n                            </div>\r\n                        )\r\n                    })   \r\n                }    \r\n                </div>\r\n            </div>\r\n            <button className=\"bg-orange-500 focus:outline-none hover:bg-orange-400 text-lg text-white mx-2 mt-8 py-5 px-10 font-bold rounded w-3/4 md:w-1/4\" onClick={ tryAgain }>Try Again</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Answers\r\n\r\n\r\n","import React from 'react';\r\n\r\nconst QuizStart = ({ nextStep }) => {\r\n    return (\r\n        <div className=\"h-screen flex flex-col justify-center items-center\">\r\n            <div className=\"bg-gray-300 w-11/12 md:w-1/2 py-16 text-center shadow-md\">\r\n                <h1 className=\"text-5xl font-bold\">QUIZ</h1>\r\n                <p className=\"italic mb-10\">Created using React</p>\r\n                <button onClick={ nextStep } className=\"bg-green-500 hover:bg-green-400 focus:outline-none text-white text-xl py-4 px-10 rounded-lg\">Click To Start</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QuizStart;","import React, { useState } from 'react'\r\nimport Question from './Question'\r\nimport questions from '../questions.json';\r\nimport Answers from './Answers'\r\nimport QuizStart from './QuizStart'\r\n\r\nconst Quiz = () => {\r\n\r\n    const [step, setStep] = useState(1);\r\n    const [questionNumber, setQuestionNumber] = useState(0);\r\n    const [answers, setAnswers] = useState(new Array(questions.questions.length).fill(\"\"));\r\n        \r\n    // Handles answer select\r\n    const selectOption = (e) => {\r\n        answers[questionNumber] = e.target.value\r\n        setAnswers([...answers])\r\n    }\r\n    \r\n    // Proceed to next question\r\n    const nextQuestion = () => {\r\n        setQuestionNumber(questionNumber + 1);\r\n    }\r\n\r\n    // Go back to prev question\r\n    const prevQuestion = () => {\r\n        setQuestionNumber(questionNumber - 1);\r\n    }\r\n\r\n    // Move to answers component\r\n    const nextStep = () => {\r\n        setStep(step + 1)\r\n    }\r\n\r\n    // Reset state\r\n    const tryAgain = () => {\r\n        setStep(2)\r\n        setQuestionNumber(0)\r\n        setAnswers(new Array(questions.questions.length).fill(\"\"))\r\n    }\r\n    if (step === 1)  {\r\n        return (\r\n            <React.Fragment>\r\n                <QuizStart \r\n                    nextStep={ nextStep }\r\n                />\r\n            </React.Fragment>\r\n        )\r\n    } else if (step === 2)  {\r\n        return (\r\n            <div className=\"h-full sm:h-screen flex flex-col justify-center items-center\">  \r\n                <div className=\"relative mt-4 md:mt-0 w-3/4 md:w-1/2\">\r\n                        <Question \r\n                            questionNumber={ questionNumber }\r\n                            questions={ questions.questions }\r\n                            selectOption={ selectOption }\r\n                            answerValue={ answers }\r\n                        />\r\n                </div>\r\n                    <div className=\"flex md:static mb-6\">\r\n                        {questionNumber > 0 && <button className=\"bg-red-500 focus:outline-none hover:bg-red-400 text-sm md:text-lg text-white font-bold mx-2 mt-4 py-4 px-3 rounded\" onClick={ prevQuestion }>Previous Question</button>}\r\n                        {questionNumber + 1 < questions.questions.length && <button className=\"bg-blue-500 focus:outline-none hover:bg-blue-400 text-sm md:text-lg text-white font-bold mx-2 mt-4 py-4 px-3 rounded\" onClick={ nextQuestion }>Next Question</button>}\r\n                        {questionNumber + 1 === questions.questions.length && <button className=\"bg-green-500 focus:outline-none hover:bg-green-400 text-sm md:text-lg text-white font-bold mx-2 mt-4 py-4 px-8 rounded\" onClick={ nextStep }>Submit</button>}\r\n                    </div>\r\n            </div>\r\n        )    \r\n    } else if (step === 3) {\r\n        return (\r\n            <div className=\"flex justify-center items-center my-6\">  \r\n                <Answers answers={ answers } questions={ questions } tryAgain={ tryAgain } />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Quiz\r\n","import React from 'react';\r\nimport Quiz from './components/Quiz'\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n      <Quiz />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}