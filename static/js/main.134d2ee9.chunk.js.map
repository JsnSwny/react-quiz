{"version":3,"sources":["components/ProgressBar.js","components/Question.js","components/Answers.js","components/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["ProgressBar","style","width","height","className","this","props","percentage","Component","Question","questions","questionNumber","Fragment","length","toFixed","question","answers","map","answer","index","checked","key","value","onClick","selectOption","Answers","answerValues","Object","values","correctAnswers","correctIndex","actualAnswer","tryAgain","Quiz","state","step","e","currentAnswers","target","console","log","setState","nextQuestion","prevQuestion","submitQuestions","resetAnswers","questionsObj","i","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.134d2ee9.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport class ProgressBar extends Component {\r\n    render() {\r\n        return (\r\n            <div style={{ width: \"100%\",  height: \"30px\" }} className=\"bg-gray-800 mt-4 rounded\">\r\n                <div style={{ width: \"100%\" }} className=\"text-center z-50 text-white font-bold absolute mt-1\">{this.props.percentage}</div>\r\n                <div style={{ width: this.props.percentage, height: \"100%\" }} className=\"bg-green-600 rounded-l\"></div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProgressBar\r\n","import React, { Component } from 'react'\r\nimport ProgressBar from './ProgressBar'\r\nexport class Question extends Component {\r\n\r\n    render() {\r\n        const { questions, questionNumber } = this.props;\r\n        return (\r\n            <React.Fragment>\r\n                <h1 className=\"text-xl md:text-4xl bg-gray-900 text-white w-3/4 mx-auto p-4 text-center font-bold uppercase rounded-lg\">Question { questionNumber + 1 }</h1>\r\n                <ProgressBar \r\n                    percentage={ (((questionNumber+1) / questions.length) * 100).toFixed(0) + \"%\"}\r\n                />\r\n                <div className=\"bg-gray-300 p-8 mt-4 mx-auto shadow-md\">\r\n                    <p className=\"text-center lg:text-left text-lg sm:text-xl lg:text-2xl font-bold\">{ questions[questionNumber].question }</p>\r\n                    <br/>\r\n                    {\r\n                        questions[questionNumber].answers.map((answer,index) => {\r\n                        const checked = this.props.answer === answer ? true : false;\r\n                        return (\r\n                            <React.Fragment key={index}>\r\n                                { \r\n                                    checked === true\r\n                                    ? <button value={answer} onClick={this.props.selectOption} className=\"w-full focus:outline-none text-left text-sm md:text-xl my-2 bg-green-200 p-3 cursor-pointer\">{ answer }</button>\r\n                                    : <button value={answer} onClick={this.props.selectOption} className=\"w-full focus:outline-none text-left text-sm md:text-xl my-2 bg-gray-100 hover:bg-gray-200 p-3 cursor-pointer\">{ answer }</button>\r\n                                }\r\n                            </React.Fragment>\r\n                        )\r\n                        })   \r\n                    }      \r\n                </div>\r\n            </React.Fragment>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Question\r\n","import React, { Component } from 'react'\r\n\r\nexport class Answers extends Component {\r\n    render() {\r\n        const { answers, questions } = this.props;\r\n        const answerValues = Object.values(answers).map(answer => answer)\r\n\r\n        let correctAnswers = 0\r\n        {\r\n            answerValues.map((answer, index) => {\r\n                if(questions.questions[index].answers[questions.questions[index].correctIndex] === answer) {\r\n                    correctAnswers ++\r\n                }\r\n            })\r\n        }\r\n        return (\r\n            <div className=\"text-center w-full\">     \r\n                <h1 className=\"text-2xl md:text-4xl bg-gray-900 text-white w-3/4 sm:w-1/4 mx-auto p-4 text-center font-bold uppercase rounded-lg\">Answers</h1>\r\n                <div className=\"bg-gray-200 p-4 mt-4 mx-auto w-11/12 md:w-3/4 shadow-md\">\r\n                    <h1 className=\"text-2xl sm:text-4xl\">You scored <strong>{ correctAnswers }/{ questions.questions.length }!</strong></h1>\r\n                    <div className=\"md:flex md:flex-wrap md:justify-center mt-4\">\r\n                    {\r\n                        answerValues.map((answer,index) => {\r\n                            \r\n                            const actualAnswer = questions.questions[index].answers[questions.questions[index].correctIndex]\r\n                            return (\r\n                                <div className=\"md:w-1/2 lg:w-1/3 xl:w-1/4 my-2\"> \r\n                                    <h1 className=\"font-bold text-xl \">Question {index+1}</h1>\r\n                                    {\r\n                                        (actualAnswer === answer) \r\n                                        ? <h2 className=\"text-green-600\" key={index}><strong>Correct!</strong> You answered: \"{ answer }\"</h2> \r\n                                        : <h2 className=\"text-red-600\" key={index}><strong>Wrong!</strong> You answered: \"{ answer }\" <br/> <span className=\"text-xs\">(Correct Answer: \"{ actualAnswer }\")</span></h2>\r\n                                    }\r\n                                </div>\r\n                            )           \r\n                        })   \r\n                    }    \r\n                    </div>\r\n                </div>\r\n                <button className=\"bg-orange-500 focus:outline-none hover:bg-orange-400 text-white mx-2 mt-8 py-3 px-10 font-bold rounded\" onClick={ this.props.tryAgain }>Try Again</button>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Answers\r\n","import React, { Component } from 'react'\r\nimport Question from './Question'\r\nimport questions from '../questions.json';\r\nimport Answers from './Answers'\r\n\r\nexport class Quiz extends Component {\r\n\r\n    state = {\r\n        step: 1,\r\n        questionNumber: 0,\r\n        answers: {\r\n\r\n        }\r\n    }\r\n\r\n    // Creates object containing question number: answer\r\n    resetAnswers() {\r\n        const questionsObj = {}\r\n        for(let i=0; i<questions.questions.length; i++) {\r\n            questionsObj[i] = '';\r\n        }\r\n        this.setState({\r\n            answers: questionsObj\r\n        })\r\n    }\r\n\r\n    \r\n    componentDidMount() {\r\n        this.resetAnswers()\r\n    }\r\n\r\n    // Handles radio select\r\n    selectOption = (e) => {\r\n        let { questionNumber, answers } = this.state;\r\n        let currentAnswers = answers;\r\n        currentAnswers[questionNumber] = e.target.value\r\n        console.log(e.target.value)\r\n        this.setState({\r\n            answers: currentAnswers\r\n        })\r\n    }\r\n    \r\n    // Proceed to next question\r\n    nextQuestion = () => {\r\n        const { questionNumber } = this.state;\r\n        this.setState({\r\n            questionNumber: questionNumber + 1\r\n        });\r\n    }\r\n\r\n    // Go back to prev question\r\n    prevQuestion = () => {\r\n        const { questionNumber } = this.state;\r\n        this.setState({\r\n            questionNumber: questionNumber - 1\r\n        });\r\n    }\r\n\r\n    // Move to answers component\r\n    submitQuestions = () => {\r\n        this.setState({\r\n            step: this.state.step + 1\r\n        })\r\n    }\r\n\r\n    // Reset state\r\n    tryAgain = () => {\r\n        this.setState({\r\n            step: 1,\r\n            questionNumber: 0,\r\n            answers: {}\r\n        })\r\n        this.resetAnswers()\r\n    }\r\n\r\n    render() {\r\n        const { questionNumber } = this.state;\r\n        if (this.state.step === 1)  {\r\n            return (\r\n                <div className=\"h-full sm:h-screen flex flex-col justify-center items-center\">  \r\n                    <div className=\"relative mt-4 md:mt-0 w-3/4 md:w-1/2\">\r\n                            <Question \r\n                                questionNumber={ questionNumber }\r\n                                questions={ questions.questions }\r\n                                selectOption={ this.selectOption }\r\n                                answer={ this.state.answers[questionNumber] }\r\n                            />\r\n                    </div>\r\n                        <div className=\"flex md:static mb-6\">\r\n                            {questionNumber > 0 && <button className=\"bg-red-500 focus:outline-none hover:bg-red-400 text-sm md:text-lg text-white font-bold mx-2 mt-4 py-4 px-3 rounded\" onClick={ this.prevQuestion }>Previous Question</button>}\r\n                            {questionNumber + 1 < questions.questions.length && <button className=\"bg-blue-500 focus:outline-none hover:bg-blue-400 text-sm md:text-lg text-white font-bold mx-2 mt-4 py-4 px-3 rounded\" onClick={ this.nextQuestion }>Next Question</button>}\r\n                            {questionNumber + 1 === questions.questions.length && <button className=\"bg-green-500 focus:outline-none hover:bg-green-400 text-sm md:text-lg text-white font-bold mx-2 mt-4 py-4 px-8 rounded\" onClick={ this.submitQuestions }>Submit</button>}\r\n                        </div>\r\n                </div>\r\n            )      \r\n        } else if (this.state.step === 2) {\r\n            return (\r\n                <div className=\"lg:h-screen flex justify-center items-center my-4 lg:my-0\">  \r\n                    <Answers answers={ this.state.answers } questions={ questions } tryAgain={ this.tryAgain } />\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default Quiz\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Quiz from './components/Quiz'\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Quiz />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}